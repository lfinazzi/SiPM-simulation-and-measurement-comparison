#ifndef PARAMETERS_H
    #define PARAMETERS_H
    #include "parameters.h"
#endif

#include <string>
#include <vector>


/*****************************************************************
 * Defines the Measurement structure. Each detection has some
 * parameters which are specified here. Parameters: Detection time,
 * detection label (CT, AP, DC), number of detections, charge 
 * generated by detection.
 *****************************************************************/
struct Measurement
{
    double time;
    std::string label;
    int number;
    double charge;
};


/*****************************************************************
 * Defines the SimulationOutput structure. It is a collection of 
 * measurements that contains the entire data of all detections
 * after simulation.
 *****************************************************************/
struct SimulationOutput
{
    std::vector<Measurement> measurements;
    std::vector<double> charges;
};


/*****************************************************************
 * Defines the Simulation class. Contains simulation parameters and
 * the simulation result after calling method Simulate().
 *****************************************************************/
class Simulation
{

public: 
    Simulation(FixedParameters _fparameters, VariableParameters _vparameters)
        : fparams(_fparameters), vparams(_vparameters), numSimulations(0) {}  


    /****************************************************************************
     * Main simulation for SiPM data. Simulation results are directly stored
     * in Simulation object.
     * Arguments:
     *      none
     ****************************************************************************/
    void Simulate();


    /****************************************************************************
     * Main simulation for SiPM data. Various simulations are run and stored in
     * Simulation object.
     * Arguments:
     *      int : Number of simulations to run
     * Returns:
     *      None
     ****************************************************************************/
    void Simulate(int number);

    /****************************************************************************
     * Returns FixedParameter member.
     ****************************************************************************/
    inline FixedParameters GetFParameters() { return fparams; }

    /****************************************************************************
     * Returns VariableParameter member.
     ****************************************************************************/
    inline VariableParameters GetVParameters() { return vparams; }

    /****************************************************************************
     * Returns measurements of simulation number n
     ****************************************************************************/
    inline std::vector<double> SimDataCharge(int n) { return simData[n].charges; }

private:
    FixedParameters fparams;
    VariableParameters vparams;
    std::vector<SimulationOutput> simData;
    int numSimulations;
};
