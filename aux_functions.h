#ifndef PARAMETERS_H
    #define PARAMETERS_H
    #include "parameters.h"
#endif

#ifndef SIMULATION_H
    #define SIMULATION_H
    #include "simulation.h"
#endif


#include <vector>
#include <string>
#include <iostream>
#include <fstream>

#include "TRandom.h"
#include "TMath.h"
#include "TCanvas.h"
#include "TH1F.h"
#include "TH2F.h"
#include "TF1.h"


/*********************************************************
 * Class which is only used to generate samples of 
 * logarithmically spaced numbers. It is used only in
 * std::vector<double> Logspace().
**********************************************************/
template<typename T = double>
class Logspace {
private:
    T curValue, base;

public:
    Logspace(T first, T base) : curValue(first), base(base) {}

    T operator()() {
        T retval = curValue;
        curValue *= base;
        return retval;
    }
};



/****************************************************************************
 * Compares two values and returns another value depending on result.
 * Arguments:
 *      double : first value to compare
 *      double : Return value if first value is lower than second value
 *      double : Second value to compare
 *      double : Return value if second value is lower than first value
 * Returns:
 *      double : Corresponding value depending on condition
 ****************************************************************************/
double Minimum(double value1, double value11, double value2, double value22);


/****************************************************************************
 * Generates crosstalk events for use in simulation. Considers only
 * Primary crosstalks and secondary crosstalks.
 * Arguments:
 *      double : Mean value of Borel distribution used to calculate CTs
 * Returns:
 *      std::vector<std::vector<int>> : Number of vectors is the amount
 *          of primary CTs and the second component of each vector contains
 *          the number of secondary crosstalks
 ****************************************************************************/
std::vector<std::vector<int>> GenerateCTs(double mu);


/****************************************************************************
 * Calculates microcell gain after a certain time has elapsed.
 * Arguments:
 *      Parameters : Parameter struct containing SiPM/experiment info.
 *      double : Time since trigger
 * Returns:
 *      double : Gain after elapsed time
 ****************************************************************************/
double Gain(VariableParameters params, double apTime);


/****************************************************************************
 * Generates a vector of arrival times for primary triggers (photons)
 * following a Poisson distribution.
 * Arguments:
 *      FixedParameters : Parameter struct containing fixed SiPM/experiment info
 *      VariableParameters : Parameter struct containing variable SiPM/experiment info
 * Returns:
 *      std::vector<double> : List of photon arrival times
 ****************************************************************************/
std::vector<double> GenerateTriggers(FixedParameters fparams, VariableParameters vparams);


/****************************************************************************
 * Generates a Measurement structure from individual parameters.
 * Arguments:
 *      double : Detection arrival time
 *      int : Number of detections
 *      double : Charge generated by trigger
 *      std::string : Type of trigger (AP, CR, etc.)
 * Returns:
 *      Measurement : Struct containing all information
 ****************************************************************************/
Measurement CreateMeasurement(double time, int number, double charge, std::string source);


/****************************************************************************
 * Returns a vector which containts the differences between elements of
 * input vector.
 * Arguments:
 *      std::vector<Measurement> : Vector of measurements
 * Returns:
 *      std::vector<double> : Vector containing time differences between
 *          elements of arrival times in Measurement objects
 ****************************************************************************/
std::vector<double> Diffs(std::vector<Measurement> measurements);


/****************************************************************************
 * Returns a vector which containts the differences between elements of
 * input vector.
 * Arguments:
 *      std::vector<double> : Vector of measurements
 * Returns:
 *      std::vector<double> : Vector containing time differences between
 *          elements of arrival times
 ****************************************************************************/
std::vector<double> Diffs(std::vector<double> measurements);


/****************************************************************************
 * Generates a vector of logarithmically spaced numbers (base 10).
 * Arguments:
 *      double : start power - start value = 10**start
 *      double : stop power - end value = 10**end
 *      int : Number of elements in output vector
 * Returns:
 *      std::vector<double> : Vector containing time differences between
 *          elements of arrival times in Measurement objects
 ****************************************************************************/
std::vector<double> LogSpace(double start, double stop, int N);


/****************************************************************************
 * Fills TH1F histogram object with data stored in input vector.
 * Arguments:
 *      TH1F . Histogram to fill
 *      std::vector<double> : Data to fill histogram
 * Returns:
 *      void
 ****************************************************************************/
void FillHist(TH1F* hist, std::vector<double> counts);


/****************************************************************************
 * Fills TH2F histogram object with data stored in input vectors.
 * Arguments:
 *      TH2F . Histogram to fill
 *      std::vector<double> : Data to fill histogram x-axis
 *      std::vector<double> : Data to fill histogram y-axis
 * Returns:
 *      void
 ****************************************************************************/
void FillHist2D(TH2F* hist, std::vector<double> counts1, std::vector<double> counts2);


/****************************************************************************
 * Sorts simulation output based on arrival times.
 * Arguments:
 *      SimulationOutput : Object containing simulation data
 * Returns:
 *      SimulationOutput : Object containing sorted simulation data
 ****************************************************************************/
SimulationOutput SortOutput(SimulationOutput simOut);


/****************************************************************************
 * Calculates effective triggered cell in a recharge time window
 * Arguments:
 *      Parameters : SiPM parameters
 * Returns:
 *      double : Fired cell in a recharge time window
 ****************************************************************************/
//double SaturationCount(Parameters params);


/****************************************************************************
 * Returns sample variance for vector under study
 * Arguments:
 *      std::vector<double> : vector to study
 * Returns:
 *      double : sample variance
 ****************************************************************************/
double Var(std::vector<double> v);


/****************************************************************************
 * Returns sample mean for vector under study
 * Arguments:
 *      std::vector<double> : vector to study
 * Returns:
 *      double : sample mean
 ****************************************************************************/
double Mean(std::vector<double> v);


/****************************************************************************
 * Adjusts for sensor saturation when number of arriving photons in a 
 * recharge time is large
 * Arguments:
 *      Parameters : Simulation parameters
 *      std::vector<double> : original vector
 * Returns:
 *      double : effective counts after saturation is taken into account
 ****************************************************************************/
//std::vector<double> RemoveSaturatedCounts(Parameters params, std::vector<double> v);


/****************************************************************************
 * Calculates charge outputs in a time gate from Measurement input vector
 * Arguments:
 *      std::vector<Measurement> : input measurements
 *      FixedParameters : simulation parameters
 *      VariableParameters : simulation parameters
 * Returns:
 *      std::vector<double>
 ****************************************************************************/
std::vector<double> ChargeOutput(std::vector<Measurement> input, FixedParameters fparams, VariableParameters vparams);


/****************************************************************************
 * Copies a VariableParameters object into a vector of doubles
 * Arguments:
 *      VariableParameters : input parameters
 * Returns:
 *      std::vector<double> : output vector with parameters
 ****************************************************************************/
std::vector<double> ParameterToVector(VariableParameters &vparams);

/****************************************************************************
 * Copies paramters stored in a vector to VariableParameters object
 * Arguments:
 *      std::vector<double> : input measurements in vector form
 *      VariableParameters : simulation parameters to update
 * Returns:
 *      None
 ****************************************************************************/
void UpdateParameters(std::vector<double> &vparams_vector, VariableParameters &vparams);


/****************************************************************************
 * prints vector components to console
 * Arguments:
 *      std::vector<double> : input vector
 * Returns:
 *      None
 ****************************************************************************/
void PrintVector(std::vector<double> &vparams_vector, std::string legend);


/****************************************************************************
 * Slightly randomizes parameters in VariableParameters object
 * to test performance of Minimizer class
 * Arguments:
 *      VariableParameters : input parameters to randomize
 *      double : scale factor for randomization (default = 0.1)
 * Returns:
 *      None
 ****************************************************************************/
void RandomizeParameters(VariableParameters &vparams, double scale = 0.1);


/****************************************************************************
 * Normalized SiPM pulse signal
 * Arguments:
 *      double t : time to evaluate
 *      double t0 : time of pulse start
 *      double tau_rise : rise time
 *      double tau_fall : fall time
 * Returns:
 *      double : pulse value at time t
 ****************************************************************************/
double SiPMPulseNormalized(double t, double t0, double tau_rise, double tau_fall);


/****************************************************************************
 * Integral of SiPM pulse signal to evaluate charge lost due to gate duration.
 * Arguments:
 *      double t : time to integrate after t0
 *      double t0 : time of pulse start
 *      double tau_rise : rise time
 *      double tau_fall : fall time
 * Returns:
 *      double : integral value at time t
 ****************************************************************************/
double SiPMPulseIntegral(double t, double t0, double tau_rise, double tau_fall);


/****************************************************************************
 * Calculates timing outputs in a time gate from Measurement input vector
 * Arguments:
 *      std::vector<Measurement> : input measurements
 *      FixedParameters : simulation parameters
 *      FixedParameters : simulation parameters
 * Returns:
 *      std::vector<double>
 ****************************************************************************/
std::vector<double> TimingOutput(std::vector<Measurement> input, FixedParameters fparams);